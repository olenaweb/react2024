import React, { useState, useEffect } from "react";
import { useSelector, useDispatch } from "react-redux";
import { RootState, AppDispatch } from "./store/Store";
import { useGetCharactersQuery } from "./store/services/characterApi";
import { setCurrentPage, setLastPage } from "./store/features/paginationSlice";
import { removeFavorite } from "./store/services/favoriteSlice";
import "./App.css";
import SearchInput from "./components/SearchButton";
import Pagination from "./components/Pagination";
import Loader from "./components/Loader";
import Container from "./containers/Container";
import Popup from "./components/Popup";
import { Outlet } from "react-router-dom";

const App = () => {
  const dispatch = useDispatch<AppDispatch>();
  const { currentPage, lastPage } = useSelector((state: RootState) => state.pagination);
  const { favorites } = useSelector((state: RootState) => state.favorites);

  const [storeValue, setStoreValue] = useState<string>("");
  const { data, error, isLoading } = useGetCharactersQuery({ name: storeValue, page: currentPage });

  const updateStoreValue = (value: string) => {
    setStoreValue(value);
  };

  useEffect(() => {
    if (data) {
      dispatch(setLastPage(data.info.pages));
    }
  }, [data, dispatch]);

  const updateCurrentPage = (page: string) => {
    dispatch(setCurrentPage(page));
  };

  const handleDeselectAll = () => {
    favorites.forEach((item) => dispatch(removeFavorite(item)));
  };

  const handleDownload = () => {
    const csvContent = "data:text/csv;charset=utf-8,"
      + favorites.map(item => `${item.id},${item.name},${item.image},${item.gender},${item.species},${item.status}`).join("\n");

    const encodedUri = encodeURI(csvContent);
    const link = document.createElement("a");
    link.setAttribute("href", encodedUri);
    link.setAttribute("download", `${favorites.length}_items.csv`);
    document.body.appendChild(link); // Required for FF
    link.click();
  };

  const viewContainer = isLoading ? <Loader /> : error ? (
    <div className="error-message">
      Something's gone wrong :-( <button onClick={() => window.location.reload()}>Reload</button>
    </div>
  ) : (
    <>
      <Container results={data?.results || []} />
      <Outlet />
    </>
  );

  return (
    <>
      <SearchInput searchValue={storeValue} currentPage={currentPage} updateStoreValue={updateStoreValue} />
      <Pagination currentPage={currentPage} nextPage={data?.info.next} lastPage={lastPage} updateCurrentPage={updateCurrentPage} />
      <div className="cards-panel">{viewContainer}</div>
      {favorites.length > 0 && (
        <Popup itemCount={favorites.length} onDeselectAll={handleDeselectAll} onDownload={handleDownload} />
      )}
    </>
  );
};

export default App;
